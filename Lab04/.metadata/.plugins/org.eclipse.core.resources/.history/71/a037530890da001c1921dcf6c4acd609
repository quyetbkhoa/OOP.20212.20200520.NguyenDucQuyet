package hust.soict.dsai.aims.cart;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import hust.soict.dsai.aims.disc.DigitalVideoDisc;

public class Cart {
	public static final int MAX_NUMBERS_ORDERED	=3;
	private DigitalVideoDisc itemsOrdered[]=
			new DigitalVideoDisc[MAX_NUMBERS_ORDERED];
	private int qtyOrdered = 0;
	public void addDigitalVideoDisc(DigitalVideoDisc disc) {
		if (this.qtyOrdered < Cart.MAX_NUMBERS_ORDERED) {
			this.itemsOrdered[this.qtyOrdered] = disc;
			this.qtyOrdered += 1;
			System.out.println("A disc has been added.");
			}
		else 
			{System.out.println("Your cart is full.");}}
//	public void addDigitalVideoDisc(DigitalVideoDisc [] dvdList) {
//		if (this.qtyOrdered + dvdList.length <= Cart.MAX_NUMBERS_ORDERED) {
//			for (int i = 0; i < dvdList.length; i++) {
//				this.itemsOrdered[this.qtyOrdered + i] = dvdList[i];
//				}
//			this.qtyOrdered += dvdList.length;
//			System.out.println("The list has been added");
//			}
//		else {System.out.println("There are not enough empty slot");
//		}
//	}
	public void addDigitalVideoDisc(DigitalVideoDisc dvd1,DigitalVideoDisc dvd2) {
		if (this.qtyOrdered +1 <= Cart.MAX_NUMBERS_ORDERED) {
			this.itemsOrdered[this.qtyOrdered] = dvd1;
			this.qtyOrdered += 1;
			if (this.qtyOrdered +1 <= Cart.MAX_NUMBERS_ORDERED) {
			this.itemsOrdered[this.qtyOrdered] = dvd2;
			this.qtyOrdered += 1;
			System.out.println("two discs has been added.");}
			else { System.out.println("one disc has been added to the cart.");}
			
			}
		else 
			{System.out.println("Your cart is full.");}}
	
	public void addDigitalVideoDisc(DigitalVideoDisc ... dvds) {
		int count=0;
		for (int i = 0; i < dvds.length; i++) {
		if (this.qtyOrdered + 1 <= Cart.MAX_NUMBERS_ORDERED) {
			this.itemsOrdered[this.qtyOrdered] = dvds[i];	
			count+=1;
			this.qtyOrdered += 1;}}
		System.out.println(count+ " disc has been added to the cart");
		}
	public void removeDigitalVideoDisc(DigitalVideoDisc disc) {
		if ( this.qtyOrdered > 0) {
			for ( int i=0; i< this.qtyOrdered; i++) {
				if (itemsOrdered[i]==disc) {
					itemsOrdered[i]=null;
					this.qtyOrdered-=1;
							
					for ( int j=i; j < this.qtyOrdered; j++) {
						itemsOrdered[j]=itemsOrdered[j+1];}}}
				
					System.out.println("disc has been removed");
		
			}
			
		else { System.out.println("The cart is empty");
	}
    }
	public void sortByCost() {
		List< DigitalVideoDisc>	lst= new ArrayList< DigitalVideoDisc>();
		for(DigitalVideoDisc x : this.itemsOrdered) {
			if(x != null)
				lst.add(x);
		}					
		Collections.sort( lst, ((a,b) -> 
		Float.compare(a.getCost(), b.getCost())));
		this.itemsOrdered = lst.toArray(new DigitalVideoDisc[lst.size()]);
	}
	public void sortBytitle() {
		List< DigitalVideoDisc>	lst= new ArrayList< DigitalVideoDisc>();
		for(DigitalVideoDisc x : this.itemsOrdered) {
			if(x != null)
				lst.add(x);
		}						
		Collections.sort( lst, ((a,b) -> 
	     (a.getTitle().compareTo(b.getTitle()))));
		this.itemsOrdered = lst.toArray(new DigitalVideoDisc[lst.size()]);
	}
	public void print() {
		List< DigitalVideoDisc>	lst= new ArrayList< DigitalVideoDisc>();
		for(DigitalVideoDisc x : this.itemsOrdered) {
			if(x != null)
				lst.add(x);
		}
		lst.sort((a,b) -> {
			int cmp = a.getTitle().compareTo(b.getTitle());
			if (cmp!=0)
				return cmp;
			cmp = - Float.compare(a.getCost(), b.getCost());
			if ( cmp!=0) 
				return cmp;
			cmp=b.getLength() - a.getLength();
			return cmp;
		});
		System.out.println("***********************CART***********************");
		System.out.println("Ordered Items:");
		float tt = 0;
		int cnt = 1;
		for ( DigitalVideoDisc x: lst) {
			if ( x== null) continue;
			System.out.println(cnt + ". " + x);
			tt+=x.getCost();
			cnt++;
		}
		System.out.println("Total cost: " + tt);
		System.out.println("***************************************************");
		
		
		
	}
		
	public void searchById(int id1) {
		int count=0;
		for (DigitalVideoDisc x : this.itemsOrdered) {
			if (x==null) { continue;}			
			if (x.getId() == id1) {
				count++;
				System.out.print("Found by id " + id1 + " : ");
				System.out.println(x);
	
			}
			
		}
		if (count==0) {
			System.out.println("no match is found");
			
		}
		
	}
	public float totalCost() {
		float s=0;
		for ( int i=0; i< this.qtyOrdered; i++) {
			s+=itemsOrdered[i].getCost();
		}
		return s;
	}
	
	@Override
	public String toString() {
		return "Cart [itemsOrdered=" + Arrays.toString(itemsOrdered) + ", qtyOrdered=" + qtyOrdered + "]";
	}
//	Search By Title
	public void searchByTitle( String title) {
		int count=0;
		for (DigitalVideoDisc x : this.itemsOrdered) {
			if (x==null) { continue;}	
			String s1 = x.getTitle();
			String s2= " " +  s1 + " ";
			String title1 = " " + title +" ";
			if (s2.contains(title1)) {
				count++;
				System.out.print("Found by title " +"'"+ title+ "' "+ " : ");
				System.out.println(x);
			}
					
        }
		if (count==0) {
			System.out.println("no match is found");
			
		}
		
		
	}
}
	
	
